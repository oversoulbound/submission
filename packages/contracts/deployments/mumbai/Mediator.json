{
  "address": "0x788Fc1c502dED52FF8Cc7b2c9D54d4175E84A6d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "animationURLBase_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addressToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "animationURLBase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "possesed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "possess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a0ee76379aff782c9472c0759e6ba3acd3fe61a399ed3c488fe937f7758ca7f",
  "receipt": {
    "to": null,
    "from": "0x64478Fc1bc6726caf1D0366dC61eF44E7bD3C1bc",
    "contractAddress": "0x788Fc1c502dED52FF8Cc7b2c9D54d4175E84A6d9",
    "transactionIndex": 3,
    "gasUsed": "1746803",
    "logsBloom": "0x
    "blockHash": "0xa7fc60f58b65490016d7e0578fb525d1c36b43c1d8bb53696e6bbf3c76eaeec2",
    "transactionHash": "0x9a0ee76379aff782c9472c0759e6ba3acd3fe61a399ed3c488fe937f7758ca7f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27011226,
        "transactionHash": "0x9a0ee76379aff782c9472c0759e6ba3acd3fe61a399ed3c488fe937f7758ca7f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000064478fc1bc6726caf1d0366dc61ef44e7bd3c1bc",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ecf69965ea5c0a00000000000000000000000000000000000000000000000002e0b4f081dc6457000000000000000000000000000000000000000000001cbc75935b14e71470a700000000000000000000000000000000000000000000000001f3be571bf2084d000000000000000000000000000000000000000000001cbc768051ae4cfeccb1",
        "logIndex": 6,
        "blockHash": "0xa7fc60f58b65490016d7e0578fb525d1c36b43c1d8bb53696e6bbf3c76eaeec2"
      }
    ],
    "blockNumber": 27011226,
    "cumulativeGasUsed": "1901787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://gateway.pinata.cloud/ipfs/QmTXEs1cMkzxFDDhRG1X5MUTx796nweghTwVQxQ79LKqLW/?seed="
  ],
  "numDeployments": 1,
  "solcInputHash": "6a0a58d6e87ae737a31efafb5be356e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"animationURLBase_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addressToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animationURLBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"possesed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"possess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mediator.sol\":\"Mediator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Mediator.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract Mediator is ERC165, IERC721, IERC721Metadata {\\n  mapping(address => bool) public possesed;\\n\\n  string public animationURLBase;\\n\\n  constructor(string memory animationURLBase_) {\\n    animationURLBase = animationURLBase_;\\n  }\\n\\n  function possess(address owner) public {\\n    require(!possesed[owner], \\\"Mediator: already possesed\\\");\\n    possesed[owner] = true;\\n    uint256 tokenId = addressToTokenId(owner);\\n    emit Transfer(address(0x0), owner, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) public override {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external override {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function approve(address to, uint256 tokenId) public override {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function setApprovalForAll(address operator, bool _approved) public override {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function getApproved(uint256 tokenId) public view override returns (address operator) {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    revert(\\\"Mediator: Not Implemented\\\");\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return \\\"Oversoul Mediator\\\";\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return \\\"OM\\\";\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    address owner = tokenIdToAddress(tokenId);\\n    string memory ownerAddressString = _bytesToString(abi.encodePacked(owner));\\n    bytes memory metadata = abi.encodePacked(\\n      '{\\\"name\\\":\\\"Oversoul Mediator #',\\n      Strings.toString(tokenId),\\n      '\\\",\\\"description\\\": \\\"A visualised onchain identity with SBT\\\"',\\n      ',\\\"animation_url\\\":\\\"',\\n      abi.encodePacked(animationURLBase, ownerAddressString),\\n      '\\\"}'\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(metadata)));\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function balanceOf(address owner) public view override returns (uint256 balance) {\\n    return possesed[owner] ? 1 : 0;\\n  }\\n\\n  function ownerOf(uint256 tokenId) public pure override returns (address owner) {\\n    return tokenIdToAddress(tokenId);\\n  }\\n\\n  function addressToTokenId(address owner) public pure returns (uint256) {\\n    return uint256(uint160(owner));\\n  }\\n\\n  function tokenIdToAddress(uint256 tokenId) public pure returns (address) {\\n    return address(uint160(tokenId));\\n  }\\n\\n  function _bytesToString(bytes memory input) internal pure returns (string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n    bytes memory output = new bytes(2 + input.length * 2);\\n    output[0] = \\\"0\\\";\\n    output[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < input.length; i++) {\\n      output[2 + i * 2] = alphabet[uint256(uint8(input[i] >> 4))];\\n      output[3 + i * 2] = alphabet[uint256(uint8(input[i] & 0x0f))];\\n    }\\n    return string(output);\\n  }\\n}\\n\",\"keccak256\":\"0x86bf8c73530ba8cd862a3f7de4d882898d2987ee9f05c34dae896485c73daf19\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200205438038062002054833981810160405281019062000037919062000185565b80600190805190602001906200004f92919062000057565b50506200035a565b82805462000065906200026b565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b60006200011e6200011884620001ff565b620001d6565b9050828152602081018484840111156200013d576200013c6200033a565b5b6200014a84828562000235565b509392505050565b600082601f8301126200016a576200016962000335565b5b81516200017c84826020860162000107565b91505092915050565b6000602082840312156200019e576200019d62000344565b5b600082015167ffffffffffffffff811115620001bf57620001be6200033f565b5b620001cd8482850162000152565b91505092915050565b6000620001e2620001f5565b9050620001f08282620002a1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200021d576200021c62000306565b5b620002288262000349565b9050602081019050919050565b60005b838110156200025557808201518184015260208101905062000238565b8381111562000265576000848401525b50505050565b600060028204905060018216806200028457607f821691505b602082108114156200029b576200029a620002d7565b5b50919050565b620002ac8262000349565b810181811067ffffffffffffffff82111715620002ce57620002cd62000306565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b611cea806200036a6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636511bf2e116100a2578063b88d4fde11610071578063b88d4fde14610305578063c87b56dd14610321578063daf90ef714610351578063e985e9c51461036d578063fd55c1811461039d57610116565b80636511bf2e1461026b57806370a082311461029b57806395d89b41146102cb578063a22cb465146102e957610116565b8063095ea7b3116100e9578063095ea7b3146101c957806323b872dd146101e557806342842e0e146102015780634c4ccdc11461021d5780636352211e1461023b57610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc1461016957806308bb76a514610199575b600080fd5b610135600480360381019061013091906112c2565b6103cd565b604051610142919061163b565b60405180910390f35b6101536104af565b6040516101609190611656565b60405180910390f35b610183600480360381019061017e91906112ef565b6104ec565b6040516101909190611620565b60405180910390f35b6101b360048036038101906101ae91906112ef565b610529565b6040516101c09190611620565b60405180910390f35b6101e360048036038101906101de9190611282565b610533565b005b6101ff60048036038101906101fa9190611167565b61056e565b005b61021b60048036038101906102169190611167565b6105a9565b005b6102256105e4565b6040516102329190611656565b60405180910390f35b610255600480360381019061025091906112ef565b610672565b6040516102629190611620565b60405180910390f35b610285600480360381019061028091906110fa565b610684565b60405161029291906116b8565b60405180910390f35b6102b560048036038101906102b091906110fa565b6106a4565b6040516102c291906116b8565b60405180910390f35b6102d361070a565b6040516102e09190611656565b60405180910390f35b61030360048036038101906102fe9190611242565b610747565b005b61031f600480360381019061031a91906111ba565b610782565b005b61033b600480360381019061033691906112ef565b6107bd565b6040516103489190611656565b60405180910390f35b61036b600480360381019061036691906110fa565b61087a565b005b61038760048036038101906103829190611127565b6109ca565b604051610394919061163b565b60405180910390f35b6103b760048036038101906103b291906110fa565b610a07565b6040516103c4919061163b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104a857506104a782610a27565b5b9050919050565b60606040518060400160405280601181526020017f4f766572736f756c204d65646961746f72000000000000000000000000000000815250905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611698565b60405180910390fd5b6000819050919050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a090611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611698565b60405180910390fd5b600180546105f1906118e1565b80601f016020809104026020016040519081016040528092919081815260200182805461061d906118e1565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b505050505081565b600061067d82610529565b9050919050565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106fd576000610700565b60015b60ff169050919050565b60606040518060400160405280600281526020017f4f4d000000000000000000000000000000000000000000000000000000000000815250905090565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490611698565b60405180910390fd5b606060006107ca83610529565b905060006107f6826040516020016107e2919061156f565b604051602081830303815290604052610a91565b9050600061080385610d8b565b60018360405160200161081792919061158a565b6040516020818303038152906040526040516020016108379291906115ae565b604051602081830303815290604052905061085181610eec565b60405160200161086191906115fe565b6040516020818303038152906040529350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90611678565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600061096882610684565b9050808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90611698565b60405180910390fd5b60006020528060005260406000206000915054906101000a900460ff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060006040518060400160405280601081526020017f30313233343536373839616263646566000000000000000000000000000000008152509050600060028451610add91906117ac565b6002610ae99190611725565b67ffffffffffffffff811115610b0257610b01611a6d565b5b6040519080825280601f01601f191660200182016040528015610b345781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b6c57610b6b611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610bd057610bcf611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b8451811015610d8057826004868381518110610c2157610c20611a3e565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610c6757610c66611a3e565b5b602001015160f81c60f81b82600283610c8091906117ac565b6002610c8c9190611725565b81518110610c9d57610c9c611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110610ce557610ce4611a3e565b5b602001015160f81c60f81b1660f81c60ff1681518110610d0857610d07611a3e565b5b602001015160f81c60f81b82600283610d2191906117ac565b6003610d2d9190611725565b81518110610d3e57610d3d611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610d7890611913565b915050610c02565b508092505050919050565b60606000821415610dd3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ee7565b600082905060005b60008214610e05578080610dee90611913565b915050600a82610dfe919061177b565b9150610ddb565b60008167ffffffffffffffff811115610e2157610e20611a6d565b5b6040519080825280601f01601f191660200182016040528015610e535781602001600182028036833780820191505090505b5090505b60008514610ee057600182610e6c9190611806565b9150600a85610e7b9190611980565b6030610e879190611725565b60f81b818381518110610e9d57610e9c611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610ed9919061177b565b9450610e57565b8093505050505b919050565b6060600082511415610f0f5760405180602001604052806000815250905061104b565b6000604051806060016040528060408152602001611c756040913990506000600360028551610f3e9190611725565b610f48919061177b565b6004610f5491906117ac565b67ffffffffffffffff811115610f6d57610f6c611a6d565b5b6040519080825280601f01601f191660200182016040528015610f9f5781602001600182028036833780820191505090505b509050600182016020820185865187015b8082101561100b576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050610fb0565b5050600386510660018114611027576002811461103a57611042565b603d6001830353603d6002830353611042565b603d60018303535b50505080925050505b919050565b60008135905061105f81611c18565b92915050565b60008135905061107481611c2f565b92915050565b60008135905061108981611c46565b92915050565b60008083601f8401126110a5576110a4611aa1565b5b8235905067ffffffffffffffff8111156110c2576110c1611a9c565b5b6020830191508360018202830111156110de576110dd611aa6565b5b9250929050565b6000813590506110f481611c5d565b92915050565b6000602082840312156111105761110f611ab0565b5b600061111e84828501611050565b91505092915050565b6000806040838503121561113e5761113d611ab0565b5b600061114c85828601611050565b925050602061115d85828601611050565b9150509250929050565b6000806000606084860312156111805761117f611ab0565b5b600061118e86828701611050565b935050602061119f86828701611050565b92505060406111b0868287016110e5565b9150509250925092565b6000806000806000608086880312156111d6576111d5611ab0565b5b60006111e488828901611050565b95505060206111f588828901611050565b9450506040611206888289016110e5565b935050606086013567ffffffffffffffff81111561122757611226611aab565b5b6112338882890161108f565b92509250509295509295909350565b6000806040838503121561125957611258611ab0565b5b600061126785828601611050565b925050602061127885828601611065565b9150509250929050565b6000806040838503121561129957611298611ab0565b5b60006112a785828601611050565b92505060206112b8858286016110e5565b9150509250929050565b6000602082840312156112d8576112d7611ab0565b5b60006112e68482850161107a565b91505092915050565b60006020828403121561130557611304611ab0565b5b6000611313848285016110e5565b91505092915050565b6113258161183a565b82525050565b61133c6113378261183a565b61195c565b82525050565b61134b8161184c565b82525050565b600061135c826116e8565b61136681856116fe565b93506113768185602086016118ae565b80840191505092915050565b600061138d826116f3565b6113978185611709565b93506113a78185602086016118ae565b6113b081611ab5565b840191505092915050565b60006113c6826116f3565b6113d0818561171a565b93506113e08185602086016118ae565b80840191505092915050565b600081546113f9816118e1565b611403818661171a565b9450600182166000811461141e576001811461142f57611462565b60ff19831686528186019350611462565b611438856116d3565b60005b8381101561145a5781548189015260018201915060208101905061143b565b838801955050505b50505092915050565b6000611478601c8361171a565b915061148382611ad3565b601c82019050919050565b600061149b601a83611709565b91506114a682611afc565b602082019050919050565b60006114be601983611709565b91506114c982611b25565b602082019050919050565b60006114e160028361171a565b91506114ec82611b4e565b600282019050919050565b600061150460128361171a565b915061150f82611b77565b601282019050919050565b600061152760398361171a565b915061153282611ba0565b603982019050919050565b600061154a601d8361171a565b915061155582611bef565b601d82019050919050565b611569816118a4565b82525050565b600061157b828461132b565b60148201915081905092915050565b600061159682856113ec565b91506115a282846113bb565b91508190509392505050565b60006115b98261146b565b91506115c582856113bb565b91506115d08261151a565b91506115db826114f7565b91506115e78284611351565b91506115f2826114d4565b91508190509392505050565b60006116098261153d565b915061161582846113bb565b915081905092915050565b6000602082019050611635600083018461131c565b92915050565b60006020820190506116506000830184611342565b92915050565b600060208201905081810360008301526116708184611382565b905092915050565b600060208201905081810360008301526116918161148e565b9050919050565b600060208201905081810360008301526116b1816114b1565b9050919050565b60006020820190506116cd6000830184611560565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611730826118a4565b915061173b836118a4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117705761176f6119b1565b5b828201905092915050565b6000611786826118a4565b9150611791836118a4565b9250826117a1576117a06119e0565b5b828204905092915050565b60006117b7826118a4565b91506117c2836118a4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156117fb576117fa6119b1565b5b828202905092915050565b6000611811826118a4565b915061181c836118a4565b92508282101561182f5761182e6119b1565b5b828203905092915050565b600061184582611884565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156118cc5780820151818401526020810190506118b1565b838111156118db576000848401525b50505050565b600060028204905060018216806118f957607f821691505b6020821081141561190d5761190c611a0f565b5b50919050565b600061191e826118a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611951576119506119b1565b5b600182019050919050565b60006119678261196e565b9050919050565b600061197982611ac6565b9050919050565b600061198b826118a4565b9150611996836118a4565b9250826119a6576119a56119e0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f7b226e616d65223a224f766572736f756c204d65646961746f72202300000000600082015250565b7f4d65646961746f723a20616c726561647920706f737365736564000000000000600082015250565b7f4d65646961746f723a204e6f7420496d706c656d656e74656400000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f2c22616e696d6174696f6e5f75726c223a220000000000000000000000000000600082015250565b7f222c226465736372697074696f6e223a2022412076697375616c69736564206f60008201527f6e636861696e206964656e746974792077697468205342542200000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b611c218161183a565b8114611c2c57600080fd5b50565b611c388161184c565b8114611c4357600080fd5b50565b611c4f81611858565b8114611c5a57600080fd5b50565b611c66816118a4565b8114611c7157600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f56cf2f94331ea85fde3f4242fa8c7193515ae5eeea3ebc564a35ed0b8db22c064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636511bf2e116100a2578063b88d4fde11610071578063b88d4fde14610305578063c87b56dd14610321578063daf90ef714610351578063e985e9c51461036d578063fd55c1811461039d57610116565b80636511bf2e1461026b57806370a082311461029b57806395d89b41146102cb578063a22cb465146102e957610116565b8063095ea7b3116100e9578063095ea7b3146101c957806323b872dd146101e557806342842e0e146102015780634c4ccdc11461021d5780636352211e1461023b57610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc1461016957806308bb76a514610199575b600080fd5b610135600480360381019061013091906112c2565b6103cd565b604051610142919061163b565b60405180910390f35b6101536104af565b6040516101609190611656565b60405180910390f35b610183600480360381019061017e91906112ef565b6104ec565b6040516101909190611620565b60405180910390f35b6101b360048036038101906101ae91906112ef565b610529565b6040516101c09190611620565b60405180910390f35b6101e360048036038101906101de9190611282565b610533565b005b6101ff60048036038101906101fa9190611167565b61056e565b005b61021b60048036038101906102169190611167565b6105a9565b005b6102256105e4565b6040516102329190611656565b60405180910390f35b610255600480360381019061025091906112ef565b610672565b6040516102629190611620565b60405180910390f35b610285600480360381019061028091906110fa565b610684565b60405161029291906116b8565b60405180910390f35b6102b560048036038101906102b091906110fa565b6106a4565b6040516102c291906116b8565b60405180910390f35b6102d361070a565b6040516102e09190611656565b60405180910390f35b61030360048036038101906102fe9190611242565b610747565b005b61031f600480360381019061031a91906111ba565b610782565b005b61033b600480360381019061033691906112ef565b6107bd565b6040516103489190611656565b60405180910390f35b61036b600480360381019061036691906110fa565b61087a565b005b61038760048036038101906103829190611127565b6109ca565b604051610394919061163b565b60405180910390f35b6103b760048036038101906103b291906110fa565b610a07565b6040516103c4919061163b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104a857506104a782610a27565b5b9050919050565b60606040518060400160405280601181526020017f4f766572736f756c204d65646961746f72000000000000000000000000000000815250905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090611698565b60405180910390fd5b6000819050919050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a090611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db90611698565b60405180910390fd5b600180546105f1906118e1565b80601f016020809104026020016040519081016040528092919081815260200182805461061d906118e1565b801561066a5780601f1061063f5761010080835404028352916020019161066a565b820191906000526020600020905b81548152906001019060200180831161064d57829003601f168201915b505050505081565b600061067d82610529565b9050919050565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106fd576000610700565b60015b60ff169050919050565b60606040518060400160405280600281526020017f4f4d000000000000000000000000000000000000000000000000000000000000815250905090565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077990611698565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490611698565b60405180910390fd5b606060006107ca83610529565b905060006107f6826040516020016107e2919061156f565b604051602081830303815290604052610a91565b9050600061080385610d8b565b60018360405160200161081792919061158a565b6040516020818303038152906040526040516020016108379291906115ae565b604051602081830303815290604052905061085181610eec565b60405160200161086191906115fe565b6040516020818303038152906040529350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90611678565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600061096882610684565b9050808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90611698565b60405180910390fd5b60006020528060005260406000206000915054906101000a900460ff1681565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b606060006040518060400160405280601081526020017f30313233343536373839616263646566000000000000000000000000000000008152509050600060028451610add91906117ac565b6002610ae99190611725565b67ffffffffffffffff811115610b0257610b01611a6d565b5b6040519080825280601f01601f191660200182016040528015610b345781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b6c57610b6b611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610bd057610bcf611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b8451811015610d8057826004868381518110610c2157610c20611a3e565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610c6757610c66611a3e565b5b602001015160f81c60f81b82600283610c8091906117ac565b6002610c8c9190611725565b81518110610c9d57610c9c611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110610ce557610ce4611a3e565b5b602001015160f81c60f81b1660f81c60ff1681518110610d0857610d07611a3e565b5b602001015160f81c60f81b82600283610d2191906117ac565b6003610d2d9190611725565b81518110610d3e57610d3d611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610d7890611913565b915050610c02565b508092505050919050565b60606000821415610dd3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ee7565b600082905060005b60008214610e05578080610dee90611913565b915050600a82610dfe919061177b565b9150610ddb565b60008167ffffffffffffffff811115610e2157610e20611a6d565b5b6040519080825280601f01601f191660200182016040528015610e535781602001600182028036833780820191505090505b5090505b60008514610ee057600182610e6c9190611806565b9150600a85610e7b9190611980565b6030610e879190611725565b60f81b818381518110610e9d57610e9c611a3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610ed9919061177b565b9450610e57565b8093505050505b919050565b6060600082511415610f0f5760405180602001604052806000815250905061104b565b6000604051806060016040528060408152602001611c756040913990506000600360028551610f3e9190611725565b610f48919061177b565b6004610f5491906117ac565b67ffffffffffffffff811115610f6d57610f6c611a6d565b5b6040519080825280601f01601f191660200182016040528015610f9f5781602001600182028036833780820191505090505b509050600182016020820185865187015b8082101561100b576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050610fb0565b5050600386510660018114611027576002811461103a57611042565b603d6001830353603d6002830353611042565b603d60018303535b50505080925050505b919050565b60008135905061105f81611c18565b92915050565b60008135905061107481611c2f565b92915050565b60008135905061108981611c46565b92915050565b60008083601f8401126110a5576110a4611aa1565b5b8235905067ffffffffffffffff8111156110c2576110c1611a9c565b5b6020830191508360018202830111156110de576110dd611aa6565b5b9250929050565b6000813590506110f481611c5d565b92915050565b6000602082840312156111105761110f611ab0565b5b600061111e84828501611050565b91505092915050565b6000806040838503121561113e5761113d611ab0565b5b600061114c85828601611050565b925050602061115d85828601611050565b9150509250929050565b6000806000606084860312156111805761117f611ab0565b5b600061118e86828701611050565b935050602061119f86828701611050565b92505060406111b0868287016110e5565b9150509250925092565b6000806000806000608086880312156111d6576111d5611ab0565b5b60006111e488828901611050565b95505060206111f588828901611050565b9450506040611206888289016110e5565b935050606086013567ffffffffffffffff81111561122757611226611aab565b5b6112338882890161108f565b92509250509295509295909350565b6000806040838503121561125957611258611ab0565b5b600061126785828601611050565b925050602061127885828601611065565b9150509250929050565b6000806040838503121561129957611298611ab0565b5b60006112a785828601611050565b92505060206112b8858286016110e5565b9150509250929050565b6000602082840312156112d8576112d7611ab0565b5b60006112e68482850161107a565b91505092915050565b60006020828403121561130557611304611ab0565b5b6000611313848285016110e5565b91505092915050565b6113258161183a565b82525050565b61133c6113378261183a565b61195c565b82525050565b61134b8161184c565b82525050565b600061135c826116e8565b61136681856116fe565b93506113768185602086016118ae565b80840191505092915050565b600061138d826116f3565b6113978185611709565b93506113a78185602086016118ae565b6113b081611ab5565b840191505092915050565b60006113c6826116f3565b6113d0818561171a565b93506113e08185602086016118ae565b80840191505092915050565b600081546113f9816118e1565b611403818661171a565b9450600182166000811461141e576001811461142f57611462565b60ff19831686528186019350611462565b611438856116d3565b60005b8381101561145a5781548189015260018201915060208101905061143b565b838801955050505b50505092915050565b6000611478601c8361171a565b915061148382611ad3565b601c82019050919050565b600061149b601a83611709565b91506114a682611afc565b602082019050919050565b60006114be601983611709565b91506114c982611b25565b602082019050919050565b60006114e160028361171a565b91506114ec82611b4e565b600282019050919050565b600061150460128361171a565b915061150f82611b77565b601282019050919050565b600061152760398361171a565b915061153282611ba0565b603982019050919050565b600061154a601d8361171a565b915061155582611bef565b601d82019050919050565b611569816118a4565b82525050565b600061157b828461132b565b60148201915081905092915050565b600061159682856113ec565b91506115a282846113bb565b91508190509392505050565b60006115b98261146b565b91506115c582856113bb565b91506115d08261151a565b91506115db826114f7565b91506115e78284611351565b91506115f2826114d4565b91508190509392505050565b60006116098261153d565b915061161582846113bb565b915081905092915050565b6000602082019050611635600083018461131c565b92915050565b60006020820190506116506000830184611342565b92915050565b600060208201905081810360008301526116708184611382565b905092915050565b600060208201905081810360008301526116918161148e565b9050919050565b600060208201905081810360008301526116b1816114b1565b9050919050565b60006020820190506116cd6000830184611560565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611730826118a4565b915061173b836118a4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117705761176f6119b1565b5b828201905092915050565b6000611786826118a4565b9150611791836118a4565b9250826117a1576117a06119e0565b5b828204905092915050565b60006117b7826118a4565b91506117c2836118a4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156117fb576117fa6119b1565b5b828202905092915050565b6000611811826118a4565b915061181c836118a4565b92508282101561182f5761182e6119b1565b5b828203905092915050565b600061184582611884565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156118cc5780820151818401526020810190506118b1565b838111156118db576000848401525b50505050565b600060028204905060018216806118f957607f821691505b6020821081141561190d5761190c611a0f565b5b50919050565b600061191e826118a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611951576119506119b1565b5b600182019050919050565b60006119678261196e565b9050919050565b600061197982611ac6565b9050919050565b600061198b826118a4565b9150611996836118a4565b9250826119a6576119a56119e0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f7b226e616d65223a224f766572736f756c204d65646961746f72202300000000600082015250565b7f4d65646961746f723a20616c726561647920706f737365736564000000000000600082015250565b7f4d65646961746f723a204e6f7420496d706c656d656e74656400000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f2c22616e696d6174696f6e5f75726c223a220000000000000000000000000000600082015250565b7f222c226465736372697074696f6e223a2022412076697375616c69736564206f60008201527f6e636861696e206964656e746974792077697468205342542200000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b611c218161183a565b8114611c2c57600080fd5b50565b611c388161184c565b8114611c4357600080fd5b50565b611c4f81611858565b8114611c5a57600080fd5b50565b611c66816118a4565b8114611c7157600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f56cf2f94331ea85fde3f4242fa8c7193515ae5eeea3ebc564a35ed0b8db22c064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 474,
        "contract": "contracts/Mediator.sol:Mediator",
        "label": "possesed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 476,
        "contract": "contracts/Mediator.sol:Mediator",
        "label": "animationURLBase",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}